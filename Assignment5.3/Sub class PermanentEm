package myPack;

public class PermanentEm extends Employee5 {// subclass that extends superclass
	
	// Generating setter and getter method for PermanentEm	
	public int getEmpId() {
		return empId;
	}


	public void setEmpId(int empId) {
		this.empId = empId;
	}


	public String getEmpName() {
		return empName;
	}


	public void setEmpName(String empName) {
		this.empName = empName;
	}


	void calculate_balance_leaves(){// inherited method's implementation
		System.out.println("For Permanent Employee total leaves= " +Total_leaves);
	}
	
	
	void print_leave_details(){// exclusive method to PermanentEm(Permanent Employee only
		
		System.out.println("Paid leave balance :"+paid_leave   +"  Sick leaves balance :"+sick_leave   + "  Casual leave balance :"+casual_leave);
		

	}
	// inherited method's implementation
	public boolean avail_leave(int no_of_leaves, char type_of_leave){// using switch case in this method to choose type of leave, availability and print details after availing.
	
		switch(type_of_leave){
		case (char) 'a': if(paid_leave>=no_of_leaves){
			System.out.println("leave granted");
		paid_leave=paid_leave-no_of_leaves;	
		
		System.out.println("Paid leave balance :"+paid_leave   +"  Sick leaves balance :"+sick_leave   + "  Casual leave balance :"+casual_leave);

		return true ;
		}
			else{System.out.println("not enough leaves");
			return false ;}
			
			
	case (char) 'b': if(sick_leave>=no_of_leaves){
		System.out.println("leave granted");
		sick_leave=sick_leave-no_of_leaves;	
	System.out.println("Paid leave balance :"+paid_leave   +"  Sick leaves balance :"+sick_leave   + "  Casual leave balance :"+casual_leave);
	
	return true ;
	}
		else{System.out.println("not enough leaves");
		return false ;
		
		}

	case (char) 'c': if(casual_leave>=no_of_leaves){
		System.out.println("leave granted");
		casual_leave=casual_leave-no_of_leaves;
	System.out.println("Paid leave balance :"+paid_leave   +"  Sick leaves balance :"+sick_leave   + "  Casual leave balance :"+casual_leave);

	return true ;
	}
		else{System.out.println("not enough leaves");
		return false ;
		}
		
		
		default:{
		return false;}
		}
		
	}
	
	// inherited method's implementation
	 void calculate_salary(){// for Permanent employee salary.
	
		 pfa=0.12*basic;
		 hra=0.5*basic;
		 tot_sal=basic+hra-pfa;
		System.out.println(tot_sal);
	}

}
