package myPack;

public class VariableStack implements Stack { //public class implements Stack interface and thus implements push and void method by default
	
	 private int stackSize;
	    private int[] stackArr;
	    private int top;
	 
	    /**
	     * constructor to create stack with size
	     * @param size
	     */
	    public VariableStack(int size) {
	        this.stackSize = size;
	        this.stackArr = new int[stackSize];
	        this.top = -1;
	    }
	 
	    /**
	     * This method adds new entry to the top 
	     * of the stack
	    */
	    public void push(int l){
	        if(this.isStackFull()){
	            System.out.println(("Stack is full. Increasing the capacity."));
	            this.increaseStackCapacity();
	        }
	        System.out.println("Adding: "+l);
	        this.stackArr[++top] = l;
	    }
	 
	   
	  // this method increases capacity of the stack automatically
	    
	    private void increaseStackCapacity(){
	         
	        int[] newStack = new int[this.stackSize*2];
	        for(int i=0;i<stackSize;i++){
	            newStack[i] = this.stackArr[i];
	        }
	        this.stackArr = newStack;
	        this.stackSize = this.stackSize*2;
	    }
	     
	    /**
	     * This method returns true if the stack is 
	     * empty
	     * @return
	     */
	    public boolean isStackEmpty() {
	        return (top == -1);
	    }
	 
	    /**
	     * This method returns true if the stack is full
	     * @return
	     */
	    public boolean isStackFull() {
	        return (top == stackSize - 1);
	    }
	 
	    public static void main(String[] args) {
	        VariableStack stack = new VariableStack(2);
	        for(int i=1;i<10;i++){
	            stack.push(i);
	        }
	        for(int i=1;i<4;i++){
	            try {
	                stack.pop();
	            } catch (Exception e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }
	        }
	    }
	    
	    /**
	     * This method removes an entry from the 
	     * top of the stack.
	     * @return
	     * @throws Exception 
	     */

		@Override
	    
	    public int pop() {
	        if(this.isStackEmpty()){
	            try {
					throw new Exception("Stack is empty. Can not remove element.");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        }
	        int entry = this.stackArr[top--];
	        System.out.println("Removed entry: "+entry);
	        return entry;
	    }
	}
